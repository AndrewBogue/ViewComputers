{"version":3,"sources":["./src/app/app.component.html","./src/app/home/home.component.html","./src/app/view/computerListView.html","./src/$_lazy_route_resource lazy namespace object","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/home/home.component.ts","./src/app/services/computerdata.ts","./src/app/view/computerListView.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["export default \"<body>\\r\\n  <div class=\\\"container\\\">\\r\\n    <h3>Computer List</h3>\\r\\n    <computer-list></computer-list>\\r\\n  </div>\\r\\n</body>\\r\\n\"","export default \"<h1>Hello, world!</h1>\\r\\n<p>Welcome to your new single-page application, built with:</p>\\r\\n<ul>\\r\\n  <li><a href='https://get.asp.net/'>ASP.NET Core</a> and <a href='https://msdn.microsoft.com/en-us/library/67ef8sbd.aspx'>C#</a> for cross-platform server-side code</li>\\r\\n  <li><a href='https://angular.io/'>Angular</a> and <a href='http://www.typescriptlang.org/'>TypeScript</a> for client-side code</li>\\r\\n  <li><a href='http://getbootstrap.com/'>Bootstrap</a> for layout and styling</li>\\r\\n</ul>\\r\\n<p>To help you get started, we've also set up:</p>\\r\\n<ul>\\r\\n  <li><strong>Client-side navigation</strong>. For example, click <em>Counter</em> then <em>Back</em> to return here.</li>\\r\\n  <li><strong>Angular CLI integration</strong>. In development mode, there's no need to run <code>ng serve</code>. It runs in the background automatically, so your client-side resources are dynamically built on demand and the page refreshes when you modify any file.</li>\\r\\n  <li><strong>Efficient production builds</strong>. In production mode, development-time features are disabled, and your <code>dotnet publish</code> configuration automatically invokes <code>ng build</code> to produce minified, ahead-of-time compiled JavaScript files.</li>\\r\\n</ul>\\r\\n<p>The <code>ClientApp</code> subdirectory is a standard Angular CLI application. If you open a command prompt in that directory, you can run any <code>ng</code> command (e.g., <code>ng test</code>), or use <code>npm</code> to install extra packages into it.</p>\\r\\n<p>Hi from Andy</p>\\r\\n\"","export default \"\\r\\n<table class='table table-striped' aria-labelledby=\\\"tableLabel\\\" *ngIf=\\\"data.computers\\\">\\r\\n  <thead>\\r\\n    <tr>\\r\\n      <th>Processor</th>\\r\\n      <th>RAM</th>\\r\\n      <th>HDD</th>\\r\\n      <th>USB</th>\\r\\n      <th>Graphics card</th>\\r\\n      <th>Weight</th>\\r\\n      <th>Power Supply</th>\\r\\n    </tr>\\r\\n  </thead>\\r\\n  <tbody>\\r\\n    <tr *ngFor=\\\"let c of data.computers\\\">\\r\\n      <td>{{ c.processor }}</td>\\r\\n      <td>{{ c.ram + ' ' + c.ramUnits }}</td>\\r\\n      <td>{{ c.hardDisk + c.hardDiskUnits + c.hardDiskType }}</td>\\r\\n      <td>{{ c.usb }}</td>\\r\\n      <td>{{ c.graphicsCard }}</td>\\r\\n      <td>{{ c.weight +  ' ' + c.weightUnits }}</td>\\r\\n      <td>{{ c.powerSupply + \\\"W PSU\\\"}}</td>\\r\\n    </tr>\\r\\n  </tbody>\\r\\n</table>\\r\\n\"","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html'\r\n})\r\nexport class AppComponent {\r\n  title = 'Angular App';\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport ComputerListView from './view/computerListView';\r\nimport { ComputerData } from './services/computerdata';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    HomeComponent,\r\n    ComputerListView\r\n  ],\r\n  imports: [\r\n    BrowserModule.withServerTransition({ appId: 'ng-cli-universal' }),\r\n    HttpClientModule,\r\n    FormsModule,\r\n    RouterModule.forRoot([\r\n      { path: '', component: HomeComponent, pathMatch: 'full' },\r\n    ])\r\n  ],\r\n  providers: [\r\n    ComputerData\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n})\r\nexport class HomeComponent {\r\n}\r\n","import { HttpClient } from \"@angular/common/http\";\r\nimport { Inject, Injectable } from \"@angular/core\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { ComputerInfo } from \"./ComputerInfo\";\r\n\r\n@Injectable()\r\nexport class ComputerData {\r\n\r\n  constructor(private http: HttpClient) { }//, @Inject('BASE_URL') baseUrl: string) {}\r\n  public computers: ComputerInfo[];\r\n   \r\n  loadComputers() {\r\n    return this.http.get<[]>(\"/api/computers\")\r\n      .pipe(map(data => {\r\n        this.computers = data;\r\n        return;\r\n      }));\r\n  }\r\n}\r\n\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { ComputerData } from \"../services/computerdata\";\r\nimport { ComputerInfo } from \"../services/ComputerInfo\";\r\n\r\n@Component({\r\n  selector: \"computer-list\",\r\n  templateUrl: \"computerListView.html\"\r\n})\r\nexport default class ComputerListView implements OnInit{\r\n\r\n  public computers: ComputerInfo[];\r\n    constructor(public data: ComputerData) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.data.loadComputers()\r\n    .subscribe();\r\n  }\r\n\r\n}\r\n\r\n\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * In development mode, to ignore zone related error stack frames such as\r\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\r\n * import the following file, but please comment it out in production mode\r\n * because it will have performance impact when throw error\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nexport function getBaseUrl() {\r\n  return document.getElementsByTagName('base')[0].href;\r\n}\r\n\r\nconst providers = [\r\n  { provide: 'BASE_URL', useFactory: getBaseUrl, deps: [] }\r\n];\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic(providers).bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"],"sourceRoot":"webpack:///"}